/* ==================================================================
 * This file is part of JavaDictClient - a Java client for the Dict 
 * protocol (RFC2229)
 * Copyright Â© 2003 Ramon Casha
 *
 * Licensed under the GNU LGPL v2.1. You can find the text of this
 * license at http://www.gnu.org/copyleft/lesser.html
 * ================================================================== */
package mt.rcasha.dict.client.sample;

import mt.rcasha.dict.client.*;
import java.util.*;
import java.io.*;
import javax.swing.*;

/**
 * Sample dict client application
 * @author Ramon Casha (ramon.casha@linux.org.mt)
 */
public class Sample extends javax.swing.JFrame {
    
    String hostName = "localhost";
    int     port = DictClient.DEFAULT_PORT;
    String database = "";
    String strategy = ".";
    private String userName = null;
    private String password = null;
    List currentValues = new ArrayList();
    List currentCodes = new ArrayList();
    
    /** Creates new form Sample */
    public Sample() {
        initComponents();
        populateMenus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        databaseButtonGroup = new javax.swing.ButtonGroup();
        strategyButtonGroup = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        serverLabel = new javax.swing.JLabel();
        serverName = new javax.swing.JTextField();
        databaseLabel = new javax.swing.JLabel();
        databaseName = new javax.swing.JTextField();
        strategyLabel = new javax.swing.JLabel();
        strategyName = new javax.swing.JTextField();
        mainPanel = new javax.swing.JPanel();
        wordLabel = new javax.swing.JLabel();
        wordField = new javax.swing.JTextField();
        defineButton = new javax.swing.JButton();
        matchButton = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        listScroller = new javax.swing.JScrollPane();
        resultsList = new javax.swing.JList();
        textScroller = new javax.swing.JScrollPane();
        resultsText = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        serverMenuItem = new javax.swing.JMenuItem();
        databaseMenu = new javax.swing.JMenu();
        strategyMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setTitle("Dict client sample");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        serverLabel.setLabelFor(serverName);
        serverLabel.setText("Svr:");
        jToolBar1.add(serverLabel);

        serverName.setEditable(false);
        jToolBar1.add(serverName);

        databaseLabel.setLabelFor(databaseName);
        databaseLabel.setText("DB: ");
        databaseLabel.setToolTipText("");
        jToolBar1.add(databaseLabel);

        databaseName.setEditable(false);
        jToolBar1.add(databaseName);

        strategyLabel.setLabelFor(strategyName);
        strategyLabel.setText("Strat:");
        jToolBar1.add(strategyLabel);

        strategyName.setEditable(false);
        jToolBar1.add(strategyName);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.SOUTH);

        mainPanel.setLayout(new java.awt.GridBagLayout());

        wordLabel.setDisplayedMnemonic('W');
        wordLabel.setLabelFor(wordField);
        wordLabel.setText("Word: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mainPanel.add(wordLabel, gridBagConstraints);

        wordField.setText("word");
        wordField.setPreferredSize(new java.awt.Dimension(300, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mainPanel.add(wordField, gridBagConstraints);

        defineButton.setMnemonic('D');
        defineButton.setText("Define");
        defineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defineButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mainPanel.add(defineButton, gridBagConstraints);

        matchButton.setMnemonic('M');
        matchButton.setText("Match");
        matchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mainPanel.add(matchButton, gridBagConstraints);

        splitPane.setDividerLocation(150);
        splitPane.setDividerSize(5);
        splitPane.setPreferredSize(new java.awt.Dimension(600, 400));
        resultsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultsList.setToolTipText("Click on a definition to see the text");
        resultsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultsListValueChanged(evt);
            }
        });

        listScroller.setViewportView(resultsList);

        splitPane.setLeftComponent(listScroller);

        resultsText.setEditable(false);
        resultsText.setPreferredSize(new java.awt.Dimension(30, 25));
        textScroller.setViewportView(resultsText);

        splitPane.setRightComponent(textScroller);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        mainPanel.add(splitPane, gridBagConstraints);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        optionsMenu.setMnemonic('O');
        optionsMenu.setText("Options");
        loginMenuItem.setMnemonic('L');
        loginMenuItem.setText("Login...");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });

        optionsMenu.add(loginMenuItem);

        serverMenuItem.setMnemonic('V');
        serverMenuItem.setText("Server...");
        serverMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverMenuItemActionPerformed(evt);
            }
        });

        optionsMenu.add(serverMenuItem);

        databaseMenu.setMnemonic('D');
        databaseMenu.setText("Database");
        optionsMenu.add(databaseMenu);

        strategyMenu.setMnemonic('S');
        strategyMenu.setText("Strategy");
        optionsMenu.add(strategyMenu);

        menuBar.add(optionsMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents
    
    private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
        LoginDialog dlg = new LoginDialog(this);
        dlg.show();
        if(dlg.getReturnStatus() == dlg.RET_OK) {
            this.userName = dlg.getUserName();
            this.password = dlg.getPassword();
        }
        populateMenus();
    }//GEN-LAST:event_loginMenuItemActionPerformed
    
    private void updateStatus() {
        serverName.setText(hostName+":"+port);
        databaseName.setText(database);
        strategyName.setText(strategy);
    }
    
    private void addDatabaseMenuItem(String code, String name, boolean chosen) {
        JRadioButtonMenuItem item = new JRadioButtonMenuItem(name);
        item.setSelected(chosen);
        item.setActionCommand(code);
        item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDatabaseActionPerformed(evt);
            }
        });
        databaseMenu.add(item);
        databaseButtonGroup.add(item);
        if(chosen) {
            database = code;
        }
    }
    
    private void addStrategyMenuItem(String code, String name, boolean chosen) {
        JRadioButtonMenuItem item = new JRadioButtonMenuItem(name);
        item.setSelected(chosen);
        item.setActionCommand(code);
        item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStrategyActionPerformed(evt);
            }
        });
        strategyMenu.add(item);
        strategyButtonGroup.add(item);
        if(chosen) {
            strategy = code;
        }
    }
    
    private void clearButtonGroup(ButtonGroup grp) {
        Enumeration en = grp.getElements();
        while(en.hasMoreElements()) {
            grp.remove((JRadioButtonMenuItem)en.nextElement());
        }
    }
    
    private void populateMenus() {
        try {
            DictClient client = new DictClient(hostName, port);
            try {
                tryLogin(client);
                Map databases = client.getDatabases();
                databaseMenu.removeAll();
                clearButtonGroup(databaseButtonGroup);
                Iterator it = databases.entrySet().iterator();
                addDatabaseMenuItem(DictClient.DATABASE_ALL, "All databases", false);
                addDatabaseMenuItem(DictClient.DATABASE_FIRST, "First match", false);
                boolean chosen = true;
                while(it.hasNext()) {
                    Map.Entry entry = (Map.Entry)it.next();
                    addDatabaseMenuItem((String)entry.getKey(), (String)entry.getValue(), chosen);
                    chosen = false;
                }
                Map strategies = client.getStrategies();
                strategyMenu.removeAll();
                clearButtonGroup(strategyButtonGroup);
                it = strategies.entrySet().iterator();
                addStrategyMenuItem(DictClient.STRATEGY_DEFAULT, "Server default", true);
                while(it.hasNext()) {
                    Map.Entry entry = (Map.Entry)it.next();
                    addStrategyMenuItem((String)entry.getKey(), (String)entry.getValue(), false);
                }
                updateStatus();
            } finally {
                client.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }
    
    private void selectDatabaseActionPerformed(java.awt.event.ActionEvent evt) {
        database = evt.getActionCommand();
        updateStatus();
    }
    
    private void selectStrategyActionPerformed(java.awt.event.ActionEvent evt) {
        strategy = evt.getActionCommand();
        updateStatus();
    }
    
    
    private void tryLogin(DictClient client) throws DictException, IOException {
        if(userName!=null && password!=null) {
            client.auth(userName, password);
        }
    }
    
    
    private void serverMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverMenuItemActionPerformed
        ServerDialog dlg = new ServerDialog(this);
        dlg.show();
        if(dlg.getReturnStatus() == dlg.RET_OK) {
            hostName = dlg.getHostName();
            port = dlg.getPort();
            try {
                populateMenus();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,e.toString());
            }
        }
    }//GEN-LAST:event_serverMenuItemActionPerformed
    
    private void updatedLists() {
        resultsList.setModel(new ListListModel(currentCodes));
    }
    
    private void matchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchButtonActionPerformed
        try {
            DictClient client = new DictClient(hostName, port);
            tryLogin(client);
            try {
                Map matches = client.getMatches(database, strategy, wordField.getText());
                Iterator it = matches.entrySet().iterator();
                currentValues.clear();
                currentCodes.clear();
                while(it.hasNext()) {
                    Map.Entry entry = (Map.Entry)it.next();
                    currentCodes.add(entry.getKey());
                    currentValues.add(entry.getValue().toString());
                }
                updatedLists();
            } finally {
                client.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,e.toString());
        }
    }//GEN-LAST:event_matchButtonActionPerformed
    
    private void defineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defineButtonActionPerformed
        try {
            DictClient client = new DictClient(hostName, port);
            tryLogin(client);
            try {
                List defs = client.getDefinitions(database, wordField.getText());
                Iterator it = defs.iterator();
                currentValues.clear();
                currentCodes.clear();
                int count = 0;
                while(it.hasNext()) {
                    DefinitionResponse def = (DefinitionResponse)it.next();
                    currentCodes.add(def.getDatabase()+":"+def.getWord());
                    currentValues.add(def.getTextualInformation());
                }
                updatedLists();
            } finally {
                client.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,e.toString());
        }
        
    }//GEN-LAST:event_defineButtonActionPerformed
    
    private void resultsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultsListValueChanged
        int index = resultsList.getSelectedIndex();
        if(index >= 0) {
            resultsText.setText((String)currentValues.get(index));
        } else {
            resultsText.setText("");
        }
    }//GEN-LAST:event_resultsListValueChanged
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        new Sample().show();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup databaseButtonGroup;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JMenu databaseMenu;
    private javax.swing.JTextField databaseName;
    private javax.swing.JButton defineButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane listScroller;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton matchButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JList resultsList;
    private javax.swing.JTextPane resultsText;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JMenuItem serverMenuItem;
    private javax.swing.JTextField serverName;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.ButtonGroup strategyButtonGroup;
    private javax.swing.JLabel strategyLabel;
    private javax.swing.JMenu strategyMenu;
    private javax.swing.JTextField strategyName;
    private javax.swing.JScrollPane textScroller;
    private javax.swing.JTextField wordField;
    private javax.swing.JLabel wordLabel;
    // End of variables declaration//GEN-END:variables
    
}
